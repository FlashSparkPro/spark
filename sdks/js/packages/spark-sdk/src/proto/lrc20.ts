// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: lrc20.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty } from "./google/protobuf/empty.js";
import { Timestamp } from "./google/protobuf/timestamp.js";
import { OperatorSpecificOwnerSignature, RevocationSecretWithIndex, TokenTransaction } from "./spark.js";

export const protobufPackage = "rpc.v1";

export enum Layer {
  L1 = 0,
  SPARK = 1,
  UNRECOGNIZED = -1,
}

export function layerFromJSON(object: any): Layer {
  switch (object) {
    case 0:
    case "L1":
      return Layer.L1;
    case 1:
    case "SPARK":
      return Layer.SPARK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Layer.UNRECOGNIZED;
  }
}

export function layerToJSON(object: Layer): string {
  switch (object) {
    case Layer.L1:
      return "L1";
    case Layer.SPARK:
      return "SPARK";
    case Layer.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum OperationType {
  /** USER_TRANSFER - User operations */
  USER_TRANSFER = 0,
  USER_BURN = 1,
  /** ISSUER_ANNOUNCE - Issuer operations */
  ISSUER_ANNOUNCE = 2,
  ISSUER_MINT = 3,
  ISSUER_TRANSFER = 4,
  ISSUER_FREEZE = 5,
  ISSUER_UNFREEZE = 6,
  ISSUER_BURN = 7,
  UNRECOGNIZED = -1,
}

export function operationTypeFromJSON(object: any): OperationType {
  switch (object) {
    case 0:
    case "USER_TRANSFER":
      return OperationType.USER_TRANSFER;
    case 1:
    case "USER_BURN":
      return OperationType.USER_BURN;
    case 2:
    case "ISSUER_ANNOUNCE":
      return OperationType.ISSUER_ANNOUNCE;
    case 3:
    case "ISSUER_MINT":
      return OperationType.ISSUER_MINT;
    case 4:
    case "ISSUER_TRANSFER":
      return OperationType.ISSUER_TRANSFER;
    case 5:
    case "ISSUER_FREEZE":
      return OperationType.ISSUER_FREEZE;
    case 6:
    case "ISSUER_UNFREEZE":
      return OperationType.ISSUER_UNFREEZE;
    case 7:
    case "ISSUER_BURN":
      return OperationType.ISSUER_BURN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OperationType.UNRECOGNIZED;
  }
}

export function operationTypeToJSON(object: OperationType): string {
  switch (object) {
    case OperationType.USER_TRANSFER:
      return "USER_TRANSFER";
    case OperationType.USER_BURN:
      return "USER_BURN";
    case OperationType.ISSUER_ANNOUNCE:
      return "ISSUER_ANNOUNCE";
    case OperationType.ISSUER_MINT:
      return "ISSUER_MINT";
    case OperationType.ISSUER_TRANSFER:
      return "ISSUER_TRANSFER";
    case OperationType.ISSUER_FREEZE:
      return "ISSUER_FREEZE";
    case OperationType.ISSUER_UNFREEZE:
      return "ISSUER_UNFREEZE";
    case OperationType.ISSUER_BURN:
      return "ISSUER_BURN";
    case OperationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum OnChainTransactionStatus {
  PENDING = 0,
  CONFIRMED = 1,
  WAITING_MINED = 2,
  MINED = 3,
  ATTACHING = 4,
  ATTACHED = 5,
  UNRECOGNIZED = -1,
}

export function onChainTransactionStatusFromJSON(object: any): OnChainTransactionStatus {
  switch (object) {
    case 0:
    case "PENDING":
      return OnChainTransactionStatus.PENDING;
    case 1:
    case "CONFIRMED":
      return OnChainTransactionStatus.CONFIRMED;
    case 2:
    case "WAITING_MINED":
      return OnChainTransactionStatus.WAITING_MINED;
    case 3:
    case "MINED":
      return OnChainTransactionStatus.MINED;
    case 4:
    case "ATTACHING":
      return OnChainTransactionStatus.ATTACHING;
    case 5:
    case "ATTACHED":
      return OnChainTransactionStatus.ATTACHED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OnChainTransactionStatus.UNRECOGNIZED;
  }
}

export function onChainTransactionStatusToJSON(object: OnChainTransactionStatus): string {
  switch (object) {
    case OnChainTransactionStatus.PENDING:
      return "PENDING";
    case OnChainTransactionStatus.CONFIRMED:
      return "CONFIRMED";
    case OnChainTransactionStatus.WAITING_MINED:
      return "WAITING_MINED";
    case OnChainTransactionStatus.MINED:
      return "MINED";
    case OnChainTransactionStatus.ATTACHING:
      return "ATTACHING";
    case OnChainTransactionStatus.ATTACHED:
      return "ATTACHED";
    case OnChainTransactionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SparkTransactionStatus {
  STARTED = 0,
  SIGNED = 1,
  FINALIZED = 2,
  UNRECOGNIZED = -1,
}

export function sparkTransactionStatusFromJSON(object: any): SparkTransactionStatus {
  switch (object) {
    case 0:
    case "STARTED":
      return SparkTransactionStatus.STARTED;
    case 1:
    case "SIGNED":
      return SparkTransactionStatus.SIGNED;
    case 2:
    case "FINALIZED":
      return SparkTransactionStatus.FINALIZED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SparkTransactionStatus.UNRECOGNIZED;
  }
}

export function sparkTransactionStatusToJSON(object: SparkTransactionStatus): string {
  switch (object) {
    case SparkTransactionStatus.STARTED:
      return "STARTED";
    case SparkTransactionStatus.SIGNED:
      return "SIGNED";
    case SparkTransactionStatus.FINALIZED:
      return "FINALIZED";
    case SparkTransactionStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SendSparkSignatureRequest {
  finalTokenTransaction: TokenTransaction | undefined;
  operatorSpecificSignatures: OperatorSpecificOwnerSignature[];
  operatorSignatureData: SparkOperatorSignatureData | undefined;
  revocationSecrets: RevocationSecretWithIndex[];
}

export interface SparkOperatorSignatureData {
  sparkOperatorSignature: Uint8Array;
  operatorIdentityPublicKey: Uint8Array;
}

export interface GetSparkTxRequest {
  finalTokenTransactionHash: Uint8Array;
}

export interface VerifySparkTxRequest {
  finalTokenTransaction: TokenTransaction | undefined;
}

export interface ListSparkTxsRequest {
  pageToken?: Uint8Array | undefined;
  pageSize?: number | undefined;
}

export interface ListWithdrawnOutputsRequest {
  blockhash?: Uint8Array | undefined;
  pageToken?: string | undefined;
  pageSize?: number | undefined;
}

export interface ListSparkTxsResponse {
  tokenTransactions: TokenTransactionResponse[];
  nextPageToken?: Uint8Array | undefined;
}

export interface ListWithdrawnOutputsResponse {
  outputs: TokenOutput[];
  nextPageToken?: string | undefined;
}

export interface GetSparkTxResponse {
  finalTokenTransaction: TokenTransaction | undefined;
}

export interface FreezeTokensRequest {
  freezeTokensPayload: FreezeTokensPayload | undefined;
  issuerSignature: Uint8Array;
}

export interface FreezeTokensResponse {
  impactedOutputIds: string[];
  /** Decoded uint128 */
  impactedTokenAmount: Uint8Array[];
}

export interface ListAllTokenTransactionsRequest {
  cursor?: ListAllTokenTransactionsCursor | undefined;
  pageSize?:
    | number
    | undefined;
  /** optional filters */
  ownerPublicKey?: Uint8Array | undefined;
  tokenPublicKey?: Uint8Array | undefined;
  beforeTimestamp?: Date | undefined;
  afterTimestamp?: Date | undefined;
  operationTypes: OperationType[];
}

export interface ListAllTokenTransactionsResponse {
  transactions: Transaction[];
  nextCursor?: ListAllTokenTransactionsCursor | undefined;
}

export interface BlockInfoResponse {
  blockInfo: BlockInfo | undefined;
}

export interface SendRawTxRequest {
  tx: string;
  maxBurnAmount?: number | undefined;
}

export interface GetTokenPubkeyInfoRequest {
  publicKeys: Uint8Array[];
}

export interface GetTokenPubkeyInfoResponse {
  tokenPubkeyInfos: TokenPubkeyInfo[];
}

export interface TokenPubkeyInfo {
  announcement?: TokenPubkeyAnnouncement | undefined;
  totalSupply: Uint8Array;
  /** scriptbuf */
  owner?: Uint8Array | undefined;
  logoUrl?: string | undefined;
}

/**
 * This proto is constructed by the wallet to specify leaves it wants to create
 * as part of a token transaction.
 */
export interface TokenOutput {
  id: string;
  ownerPublicKey: Uint8Array;
  revocationCommitment: Uint8Array;
  withdrawalBondSats: number;
  withdrawalLocktime: number;
  tokenPublicKey: Uint8Array;
  tokenAmount: Uint8Array;
  isFrozen?: boolean | undefined;
}

export interface FreezeTokensPayload {
  ownerPublicKey: Uint8Array;
  tokenPublicKey: Uint8Array;
  timestamp: number;
  operatorIdentityPublicKey: Uint8Array;
  /** Set to false when requesting a freeze. */
  shouldUnfreeze: boolean;
}

export interface TokenTransactionResponse {
  finalized: boolean;
  finalTokenTransaction: TokenTransaction | undefined;
  finalTokenTransactionHash: Uint8Array;
}

export interface Transaction {
  transaction?:
    | { $case: "onChain"; onChain: OnChainTransaction }
    | { $case: "spark"; spark: SparkTransaction }
    | undefined;
}

export interface ListAllTokenTransactionsCursor {
  /** tx_hash of the last tx fetched */
  lastTransactionHash: Uint8Array;
  /** whether the last_tx_hash is on chain */
  layer: Layer;
}

export interface OnChainTokenOutput {
  rawTx: Uint8Array;
  vout: number;
  amountSats: number;
  tokenPublicKey?: string | undefined;
  tokenAmount?: Uint8Array | undefined;
}

export interface OnChainTransaction {
  operationType: OperationType;
  transactionHash: Uint8Array;
  rawtx: Uint8Array;
  status: OnChainTransactionStatus;
  inputs: OnChainTokenOutput[];
  outputs: OnChainTokenOutput[];
  broadcastedAt: Date | undefined;
  confirmedAt: Date | undefined;
}

export interface SparkTransaction {
  operationType: OperationType;
  transactionHash: Uint8Array;
  status: SparkTransactionStatus;
  confirmedAt: Date | undefined;
  leavesToCreate: SparkLeaf[];
  leavesToSpend: SparkLeaf[];
  sparkOperatorIdentityPublicKeys: Uint8Array[];
}

export interface SparkLeaf {
  tokenPublicKey: Uint8Array;
  id: string;
  ownerPublicKey: Uint8Array;
  revocationPublicKey: Uint8Array;
  withdrawalBondSats: number;
  withdrawalLocktime: number;
  tokenAmount: Uint8Array;
  createTxHash: Uint8Array;
  createTxVoutIndex: number;
  spendTxHash?: Uint8Array | undefined;
  spendTxVoutIndex?: number | undefined;
  isFrozen?: boolean | undefined;
}

export interface BlockInfo {
  blockHash: Uint8Array;
  blockHeight: number;
  minedAt: Date | undefined;
}

export interface TokenPubkey {
  publicKey: Uint8Array;
}

export interface TokenPubkeyAnnouncement {
  publicKey: TokenPubkey | undefined;
  name: string;
  symbol: string;
  decimal: Uint8Array;
  /** u128 */
  maxSupply: Uint8Array;
  isFreezable: boolean;
}

function createBaseSendSparkSignatureRequest(): SendSparkSignatureRequest {
  return {
    finalTokenTransaction: undefined,
    operatorSpecificSignatures: [],
    operatorSignatureData: undefined,
    revocationSecrets: [],
  };
}

export const SendSparkSignatureRequest: MessageFns<SendSparkSignatureRequest> = {
  encode(message: SendSparkSignatureRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finalTokenTransaction !== undefined) {
      TokenTransaction.encode(message.finalTokenTransaction, writer.uint32(10).fork()).join();
    }
    for (const v of message.operatorSpecificSignatures) {
      OperatorSpecificOwnerSignature.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.operatorSignatureData !== undefined) {
      SparkOperatorSignatureData.encode(message.operatorSignatureData, writer.uint32(26).fork()).join();
    }
    for (const v of message.revocationSecrets) {
      RevocationSecretWithIndex.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendSparkSignatureRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendSparkSignatureRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.finalTokenTransaction = TokenTransaction.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.operatorSpecificSignatures.push(OperatorSpecificOwnerSignature.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.operatorSignatureData = SparkOperatorSignatureData.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.revocationSecrets.push(RevocationSecretWithIndex.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendSparkSignatureRequest {
    return {
      finalTokenTransaction: isSet(object.finalTokenTransaction)
        ? TokenTransaction.fromJSON(object.finalTokenTransaction)
        : undefined,
      operatorSpecificSignatures: globalThis.Array.isArray(object?.operatorSpecificSignatures)
        ? object.operatorSpecificSignatures.map((e: any) => OperatorSpecificOwnerSignature.fromJSON(e))
        : [],
      operatorSignatureData: isSet(object.operatorSignatureData)
        ? SparkOperatorSignatureData.fromJSON(object.operatorSignatureData)
        : undefined,
      revocationSecrets: globalThis.Array.isArray(object?.revocationSecrets)
        ? object.revocationSecrets.map((e: any) => RevocationSecretWithIndex.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SendSparkSignatureRequest): unknown {
    const obj: any = {};
    if (message.finalTokenTransaction !== undefined) {
      obj.finalTokenTransaction = TokenTransaction.toJSON(message.finalTokenTransaction);
    }
    if (message.operatorSpecificSignatures?.length) {
      obj.operatorSpecificSignatures = message.operatorSpecificSignatures.map((e) =>
        OperatorSpecificOwnerSignature.toJSON(e)
      );
    }
    if (message.operatorSignatureData !== undefined) {
      obj.operatorSignatureData = SparkOperatorSignatureData.toJSON(message.operatorSignatureData);
    }
    if (message.revocationSecrets?.length) {
      obj.revocationSecrets = message.revocationSecrets.map((e) => RevocationSecretWithIndex.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SendSparkSignatureRequest>): SendSparkSignatureRequest {
    return SendSparkSignatureRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendSparkSignatureRequest>): SendSparkSignatureRequest {
    const message = createBaseSendSparkSignatureRequest();
    message.finalTokenTransaction =
      (object.finalTokenTransaction !== undefined && object.finalTokenTransaction !== null)
        ? TokenTransaction.fromPartial(object.finalTokenTransaction)
        : undefined;
    message.operatorSpecificSignatures =
      object.operatorSpecificSignatures?.map((e) => OperatorSpecificOwnerSignature.fromPartial(e)) || [];
    message.operatorSignatureData =
      (object.operatorSignatureData !== undefined && object.operatorSignatureData !== null)
        ? SparkOperatorSignatureData.fromPartial(object.operatorSignatureData)
        : undefined;
    message.revocationSecrets = object.revocationSecrets?.map((e) => RevocationSecretWithIndex.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSparkOperatorSignatureData(): SparkOperatorSignatureData {
  return { sparkOperatorSignature: new Uint8Array(0), operatorIdentityPublicKey: new Uint8Array(0) };
}

export const SparkOperatorSignatureData: MessageFns<SparkOperatorSignatureData> = {
  encode(message: SparkOperatorSignatureData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sparkOperatorSignature.length !== 0) {
      writer.uint32(10).bytes(message.sparkOperatorSignature);
    }
    if (message.operatorIdentityPublicKey.length !== 0) {
      writer.uint32(18).bytes(message.operatorIdentityPublicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SparkOperatorSignatureData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSparkOperatorSignatureData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sparkOperatorSignature = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.operatorIdentityPublicKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SparkOperatorSignatureData {
    return {
      sparkOperatorSignature: isSet(object.sparkOperatorSignature)
        ? bytesFromBase64(object.sparkOperatorSignature)
        : new Uint8Array(0),
      operatorIdentityPublicKey: isSet(object.operatorIdentityPublicKey)
        ? bytesFromBase64(object.operatorIdentityPublicKey)
        : new Uint8Array(0),
    };
  },

  toJSON(message: SparkOperatorSignatureData): unknown {
    const obj: any = {};
    if (message.sparkOperatorSignature.length !== 0) {
      obj.sparkOperatorSignature = base64FromBytes(message.sparkOperatorSignature);
    }
    if (message.operatorIdentityPublicKey.length !== 0) {
      obj.operatorIdentityPublicKey = base64FromBytes(message.operatorIdentityPublicKey);
    }
    return obj;
  },

  create(base?: DeepPartial<SparkOperatorSignatureData>): SparkOperatorSignatureData {
    return SparkOperatorSignatureData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SparkOperatorSignatureData>): SparkOperatorSignatureData {
    const message = createBaseSparkOperatorSignatureData();
    message.sparkOperatorSignature = object.sparkOperatorSignature ?? new Uint8Array(0);
    message.operatorIdentityPublicKey = object.operatorIdentityPublicKey ?? new Uint8Array(0);
    return message;
  },
};

function createBaseGetSparkTxRequest(): GetSparkTxRequest {
  return { finalTokenTransactionHash: new Uint8Array(0) };
}

export const GetSparkTxRequest: MessageFns<GetSparkTxRequest> = {
  encode(message: GetSparkTxRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finalTokenTransactionHash.length !== 0) {
      writer.uint32(10).bytes(message.finalTokenTransactionHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSparkTxRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSparkTxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.finalTokenTransactionHash = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSparkTxRequest {
    return {
      finalTokenTransactionHash: isSet(object.finalTokenTransactionHash)
        ? bytesFromBase64(object.finalTokenTransactionHash)
        : new Uint8Array(0),
    };
  },

  toJSON(message: GetSparkTxRequest): unknown {
    const obj: any = {};
    if (message.finalTokenTransactionHash.length !== 0) {
      obj.finalTokenTransactionHash = base64FromBytes(message.finalTokenTransactionHash);
    }
    return obj;
  },

  create(base?: DeepPartial<GetSparkTxRequest>): GetSparkTxRequest {
    return GetSparkTxRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSparkTxRequest>): GetSparkTxRequest {
    const message = createBaseGetSparkTxRequest();
    message.finalTokenTransactionHash = object.finalTokenTransactionHash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseVerifySparkTxRequest(): VerifySparkTxRequest {
  return { finalTokenTransaction: undefined };
}

export const VerifySparkTxRequest: MessageFns<VerifySparkTxRequest> = {
  encode(message: VerifySparkTxRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finalTokenTransaction !== undefined) {
      TokenTransaction.encode(message.finalTokenTransaction, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifySparkTxRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifySparkTxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.finalTokenTransaction = TokenTransaction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifySparkTxRequest {
    return {
      finalTokenTransaction: isSet(object.finalTokenTransaction)
        ? TokenTransaction.fromJSON(object.finalTokenTransaction)
        : undefined,
    };
  },

  toJSON(message: VerifySparkTxRequest): unknown {
    const obj: any = {};
    if (message.finalTokenTransaction !== undefined) {
      obj.finalTokenTransaction = TokenTransaction.toJSON(message.finalTokenTransaction);
    }
    return obj;
  },

  create(base?: DeepPartial<VerifySparkTxRequest>): VerifySparkTxRequest {
    return VerifySparkTxRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VerifySparkTxRequest>): VerifySparkTxRequest {
    const message = createBaseVerifySparkTxRequest();
    message.finalTokenTransaction =
      (object.finalTokenTransaction !== undefined && object.finalTokenTransaction !== null)
        ? TokenTransaction.fromPartial(object.finalTokenTransaction)
        : undefined;
    return message;
  },
};

function createBaseListSparkTxsRequest(): ListSparkTxsRequest {
  return { pageToken: undefined, pageSize: undefined };
}

export const ListSparkTxsRequest: MessageFns<ListSparkTxsRequest> = {
  encode(message: ListSparkTxsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageToken !== undefined) {
      writer.uint32(10).bytes(message.pageToken);
    }
    if (message.pageSize !== undefined) {
      writer.uint32(16).uint32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSparkTxsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSparkTxsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pageToken = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSparkTxsRequest {
    return {
      pageToken: isSet(object.pageToken) ? bytesFromBase64(object.pageToken) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : undefined,
    };
  },

  toJSON(message: ListSparkTxsRequest): unknown {
    const obj: any = {};
    if (message.pageToken !== undefined) {
      obj.pageToken = base64FromBytes(message.pageToken);
    }
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListSparkTxsRequest>): ListSparkTxsRequest {
    return ListSparkTxsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSparkTxsRequest>): ListSparkTxsRequest {
    const message = createBaseListSparkTxsRequest();
    message.pageToken = object.pageToken ?? undefined;
    message.pageSize = object.pageSize ?? undefined;
    return message;
  },
};

function createBaseListWithdrawnOutputsRequest(): ListWithdrawnOutputsRequest {
  return { blockhash: undefined, pageToken: undefined, pageSize: undefined };
}

export const ListWithdrawnOutputsRequest: MessageFns<ListWithdrawnOutputsRequest> = {
  encode(message: ListWithdrawnOutputsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockhash !== undefined) {
      writer.uint32(10).bytes(message.blockhash);
    }
    if (message.pageToken !== undefined) {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== undefined) {
      writer.uint32(24).uint32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWithdrawnOutputsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWithdrawnOutputsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blockhash = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWithdrawnOutputsRequest {
    return {
      blockhash: isSet(object.blockhash) ? bytesFromBase64(object.blockhash) : undefined,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : undefined,
    };
  },

  toJSON(message: ListWithdrawnOutputsRequest): unknown {
    const obj: any = {};
    if (message.blockhash !== undefined) {
      obj.blockhash = base64FromBytes(message.blockhash);
    }
    if (message.pageToken !== undefined) {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create(base?: DeepPartial<ListWithdrawnOutputsRequest>): ListWithdrawnOutputsRequest {
    return ListWithdrawnOutputsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWithdrawnOutputsRequest>): ListWithdrawnOutputsRequest {
    const message = createBaseListWithdrawnOutputsRequest();
    message.blockhash = object.blockhash ?? undefined;
    message.pageToken = object.pageToken ?? undefined;
    message.pageSize = object.pageSize ?? undefined;
    return message;
  },
};

function createBaseListSparkTxsResponse(): ListSparkTxsResponse {
  return { tokenTransactions: [], nextPageToken: undefined };
}

export const ListSparkTxsResponse: MessageFns<ListSparkTxsResponse> = {
  encode(message: ListSparkTxsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tokenTransactions) {
      TokenTransactionResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== undefined) {
      writer.uint32(18).bytes(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSparkTxsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSparkTxsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tokenTransactions.push(TokenTransactionResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSparkTxsResponse {
    return {
      tokenTransactions: globalThis.Array.isArray(object?.tokenTransactions)
        ? object.tokenTransactions.map((e: any) => TokenTransactionResponse.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? bytesFromBase64(object.nextPageToken) : undefined,
    };
  },

  toJSON(message: ListSparkTxsResponse): unknown {
    const obj: any = {};
    if (message.tokenTransactions?.length) {
      obj.tokenTransactions = message.tokenTransactions.map((e) => TokenTransactionResponse.toJSON(e));
    }
    if (message.nextPageToken !== undefined) {
      obj.nextPageToken = base64FromBytes(message.nextPageToken);
    }
    return obj;
  },

  create(base?: DeepPartial<ListSparkTxsResponse>): ListSparkTxsResponse {
    return ListSparkTxsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListSparkTxsResponse>): ListSparkTxsResponse {
    const message = createBaseListSparkTxsResponse();
    message.tokenTransactions = object.tokenTransactions?.map((e) => TokenTransactionResponse.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? undefined;
    return message;
  },
};

function createBaseListWithdrawnOutputsResponse(): ListWithdrawnOutputsResponse {
  return { outputs: [], nextPageToken: undefined };
}

export const ListWithdrawnOutputsResponse: MessageFns<ListWithdrawnOutputsResponse> = {
  encode(message: ListWithdrawnOutputsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.outputs) {
      TokenOutput.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== undefined) {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWithdrawnOutputsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWithdrawnOutputsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.outputs.push(TokenOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWithdrawnOutputsResponse {
    return {
      outputs: globalThis.Array.isArray(object?.outputs) ? object.outputs.map((e: any) => TokenOutput.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : undefined,
    };
  },

  toJSON(message: ListWithdrawnOutputsResponse): unknown {
    const obj: any = {};
    if (message.outputs?.length) {
      obj.outputs = message.outputs.map((e) => TokenOutput.toJSON(e));
    }
    if (message.nextPageToken !== undefined) {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListWithdrawnOutputsResponse>): ListWithdrawnOutputsResponse {
    return ListWithdrawnOutputsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWithdrawnOutputsResponse>): ListWithdrawnOutputsResponse {
    const message = createBaseListWithdrawnOutputsResponse();
    message.outputs = object.outputs?.map((e) => TokenOutput.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? undefined;
    return message;
  },
};

function createBaseGetSparkTxResponse(): GetSparkTxResponse {
  return { finalTokenTransaction: undefined };
}

export const GetSparkTxResponse: MessageFns<GetSparkTxResponse> = {
  encode(message: GetSparkTxResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finalTokenTransaction !== undefined) {
      TokenTransaction.encode(message.finalTokenTransaction, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSparkTxResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSparkTxResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.finalTokenTransaction = TokenTransaction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSparkTxResponse {
    return {
      finalTokenTransaction: isSet(object.finalTokenTransaction)
        ? TokenTransaction.fromJSON(object.finalTokenTransaction)
        : undefined,
    };
  },

  toJSON(message: GetSparkTxResponse): unknown {
    const obj: any = {};
    if (message.finalTokenTransaction !== undefined) {
      obj.finalTokenTransaction = TokenTransaction.toJSON(message.finalTokenTransaction);
    }
    return obj;
  },

  create(base?: DeepPartial<GetSparkTxResponse>): GetSparkTxResponse {
    return GetSparkTxResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSparkTxResponse>): GetSparkTxResponse {
    const message = createBaseGetSparkTxResponse();
    message.finalTokenTransaction =
      (object.finalTokenTransaction !== undefined && object.finalTokenTransaction !== null)
        ? TokenTransaction.fromPartial(object.finalTokenTransaction)
        : undefined;
    return message;
  },
};

function createBaseFreezeTokensRequest(): FreezeTokensRequest {
  return { freezeTokensPayload: undefined, issuerSignature: new Uint8Array(0) };
}

export const FreezeTokensRequest: MessageFns<FreezeTokensRequest> = {
  encode(message: FreezeTokensRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.freezeTokensPayload !== undefined) {
      FreezeTokensPayload.encode(message.freezeTokensPayload, writer.uint32(10).fork()).join();
    }
    if (message.issuerSignature.length !== 0) {
      writer.uint32(18).bytes(message.issuerSignature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FreezeTokensRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFreezeTokensRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.freezeTokensPayload = FreezeTokensPayload.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.issuerSignature = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FreezeTokensRequest {
    return {
      freezeTokensPayload: isSet(object.freezeTokensPayload)
        ? FreezeTokensPayload.fromJSON(object.freezeTokensPayload)
        : undefined,
      issuerSignature: isSet(object.issuerSignature) ? bytesFromBase64(object.issuerSignature) : new Uint8Array(0),
    };
  },

  toJSON(message: FreezeTokensRequest): unknown {
    const obj: any = {};
    if (message.freezeTokensPayload !== undefined) {
      obj.freezeTokensPayload = FreezeTokensPayload.toJSON(message.freezeTokensPayload);
    }
    if (message.issuerSignature.length !== 0) {
      obj.issuerSignature = base64FromBytes(message.issuerSignature);
    }
    return obj;
  },

  create(base?: DeepPartial<FreezeTokensRequest>): FreezeTokensRequest {
    return FreezeTokensRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FreezeTokensRequest>): FreezeTokensRequest {
    const message = createBaseFreezeTokensRequest();
    message.freezeTokensPayload = (object.freezeTokensPayload !== undefined && object.freezeTokensPayload !== null)
      ? FreezeTokensPayload.fromPartial(object.freezeTokensPayload)
      : undefined;
    message.issuerSignature = object.issuerSignature ?? new Uint8Array(0);
    return message;
  },
};

function createBaseFreezeTokensResponse(): FreezeTokensResponse {
  return { impactedOutputIds: [], impactedTokenAmount: [] };
}

export const FreezeTokensResponse: MessageFns<FreezeTokensResponse> = {
  encode(message: FreezeTokensResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.impactedOutputIds) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.impactedTokenAmount) {
      writer.uint32(18).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FreezeTokensResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFreezeTokensResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.impactedOutputIds.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.impactedTokenAmount.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FreezeTokensResponse {
    return {
      impactedOutputIds: globalThis.Array.isArray(object?.impactedOutputIds)
        ? object.impactedOutputIds.map((e: any) => globalThis.String(e))
        : [],
      impactedTokenAmount: globalThis.Array.isArray(object?.impactedTokenAmount)
        ? object.impactedTokenAmount.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: FreezeTokensResponse): unknown {
    const obj: any = {};
    if (message.impactedOutputIds?.length) {
      obj.impactedOutputIds = message.impactedOutputIds;
    }
    if (message.impactedTokenAmount?.length) {
      obj.impactedTokenAmount = message.impactedTokenAmount.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FreezeTokensResponse>): FreezeTokensResponse {
    return FreezeTokensResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FreezeTokensResponse>): FreezeTokensResponse {
    const message = createBaseFreezeTokensResponse();
    message.impactedOutputIds = object.impactedOutputIds?.map((e) => e) || [];
    message.impactedTokenAmount = object.impactedTokenAmount?.map((e) => e) || [];
    return message;
  },
};

function createBaseListAllTokenTransactionsRequest(): ListAllTokenTransactionsRequest {
  return {
    cursor: undefined,
    pageSize: undefined,
    ownerPublicKey: undefined,
    tokenPublicKey: undefined,
    beforeTimestamp: undefined,
    afterTimestamp: undefined,
    operationTypes: [],
  };
}

export const ListAllTokenTransactionsRequest: MessageFns<ListAllTokenTransactionsRequest> = {
  encode(message: ListAllTokenTransactionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cursor !== undefined) {
      ListAllTokenTransactionsCursor.encode(message.cursor, writer.uint32(10).fork()).join();
    }
    if (message.pageSize !== undefined) {
      writer.uint32(16).uint32(message.pageSize);
    }
    if (message.ownerPublicKey !== undefined) {
      writer.uint32(26).bytes(message.ownerPublicKey);
    }
    if (message.tokenPublicKey !== undefined) {
      writer.uint32(34).bytes(message.tokenPublicKey);
    }
    if (message.beforeTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.beforeTimestamp), writer.uint32(42).fork()).join();
    }
    if (message.afterTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.afterTimestamp), writer.uint32(50).fork()).join();
    }
    writer.uint32(58).fork();
    for (const v of message.operationTypes) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAllTokenTransactionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAllTokenTransactionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cursor = ListAllTokenTransactionsCursor.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ownerPublicKey = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tokenPublicKey = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.beforeTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.afterTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag === 56) {
            message.operationTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 58) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.operationTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAllTokenTransactionsRequest {
    return {
      cursor: isSet(object.cursor) ? ListAllTokenTransactionsCursor.fromJSON(object.cursor) : undefined,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : undefined,
      ownerPublicKey: isSet(object.ownerPublicKey) ? bytesFromBase64(object.ownerPublicKey) : undefined,
      tokenPublicKey: isSet(object.tokenPublicKey) ? bytesFromBase64(object.tokenPublicKey) : undefined,
      beforeTimestamp: isSet(object.beforeTimestamp) ? fromJsonTimestamp(object.beforeTimestamp) : undefined,
      afterTimestamp: isSet(object.afterTimestamp) ? fromJsonTimestamp(object.afterTimestamp) : undefined,
      operationTypes: globalThis.Array.isArray(object?.operationTypes)
        ? object.operationTypes.map((e: any) => operationTypeFromJSON(e))
        : [],
    };
  },

  toJSON(message: ListAllTokenTransactionsRequest): unknown {
    const obj: any = {};
    if (message.cursor !== undefined) {
      obj.cursor = ListAllTokenTransactionsCursor.toJSON(message.cursor);
    }
    if (message.pageSize !== undefined) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.ownerPublicKey !== undefined) {
      obj.ownerPublicKey = base64FromBytes(message.ownerPublicKey);
    }
    if (message.tokenPublicKey !== undefined) {
      obj.tokenPublicKey = base64FromBytes(message.tokenPublicKey);
    }
    if (message.beforeTimestamp !== undefined) {
      obj.beforeTimestamp = message.beforeTimestamp.toISOString();
    }
    if (message.afterTimestamp !== undefined) {
      obj.afterTimestamp = message.afterTimestamp.toISOString();
    }
    if (message.operationTypes?.length) {
      obj.operationTypes = message.operationTypes.map((e) => operationTypeToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListAllTokenTransactionsRequest>): ListAllTokenTransactionsRequest {
    return ListAllTokenTransactionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAllTokenTransactionsRequest>): ListAllTokenTransactionsRequest {
    const message = createBaseListAllTokenTransactionsRequest();
    message.cursor = (object.cursor !== undefined && object.cursor !== null)
      ? ListAllTokenTransactionsCursor.fromPartial(object.cursor)
      : undefined;
    message.pageSize = object.pageSize ?? undefined;
    message.ownerPublicKey = object.ownerPublicKey ?? undefined;
    message.tokenPublicKey = object.tokenPublicKey ?? undefined;
    message.beforeTimestamp = object.beforeTimestamp ?? undefined;
    message.afterTimestamp = object.afterTimestamp ?? undefined;
    message.operationTypes = object.operationTypes?.map((e) => e) || [];
    return message;
  },
};

function createBaseListAllTokenTransactionsResponse(): ListAllTokenTransactionsResponse {
  return { transactions: [], nextCursor: undefined };
}

export const ListAllTokenTransactionsResponse: MessageFns<ListAllTokenTransactionsResponse> = {
  encode(message: ListAllTokenTransactionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.transactions) {
      Transaction.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextCursor !== undefined) {
      ListAllTokenTransactionsCursor.encode(message.nextCursor, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAllTokenTransactionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAllTokenTransactionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transactions.push(Transaction.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextCursor = ListAllTokenTransactionsCursor.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAllTokenTransactionsResponse {
    return {
      transactions: globalThis.Array.isArray(object?.transactions)
        ? object.transactions.map((e: any) => Transaction.fromJSON(e))
        : [],
      nextCursor: isSet(object.nextCursor) ? ListAllTokenTransactionsCursor.fromJSON(object.nextCursor) : undefined,
    };
  },

  toJSON(message: ListAllTokenTransactionsResponse): unknown {
    const obj: any = {};
    if (message.transactions?.length) {
      obj.transactions = message.transactions.map((e) => Transaction.toJSON(e));
    }
    if (message.nextCursor !== undefined) {
      obj.nextCursor = ListAllTokenTransactionsCursor.toJSON(message.nextCursor);
    }
    return obj;
  },

  create(base?: DeepPartial<ListAllTokenTransactionsResponse>): ListAllTokenTransactionsResponse {
    return ListAllTokenTransactionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAllTokenTransactionsResponse>): ListAllTokenTransactionsResponse {
    const message = createBaseListAllTokenTransactionsResponse();
    message.transactions = object.transactions?.map((e) => Transaction.fromPartial(e)) || [];
    message.nextCursor = (object.nextCursor !== undefined && object.nextCursor !== null)
      ? ListAllTokenTransactionsCursor.fromPartial(object.nextCursor)
      : undefined;
    return message;
  },
};

function createBaseBlockInfoResponse(): BlockInfoResponse {
  return { blockInfo: undefined };
}

export const BlockInfoResponse: MessageFns<BlockInfoResponse> = {
  encode(message: BlockInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockInfo !== undefined) {
      BlockInfo.encode(message.blockInfo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blockInfo = BlockInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockInfoResponse {
    return { blockInfo: isSet(object.blockInfo) ? BlockInfo.fromJSON(object.blockInfo) : undefined };
  },

  toJSON(message: BlockInfoResponse): unknown {
    const obj: any = {};
    if (message.blockInfo !== undefined) {
      obj.blockInfo = BlockInfo.toJSON(message.blockInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<BlockInfoResponse>): BlockInfoResponse {
    return BlockInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BlockInfoResponse>): BlockInfoResponse {
    const message = createBaseBlockInfoResponse();
    message.blockInfo = (object.blockInfo !== undefined && object.blockInfo !== null)
      ? BlockInfo.fromPartial(object.blockInfo)
      : undefined;
    return message;
  },
};

function createBaseSendRawTxRequest(): SendRawTxRequest {
  return { tx: "", maxBurnAmount: undefined };
}

export const SendRawTxRequest: MessageFns<SendRawTxRequest> = {
  encode(message: SendRawTxRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tx !== "") {
      writer.uint32(10).string(message.tx);
    }
    if (message.maxBurnAmount !== undefined) {
      writer.uint32(16).uint64(message.maxBurnAmount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendRawTxRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendRawTxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tx = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maxBurnAmount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendRawTxRequest {
    return {
      tx: isSet(object.tx) ? globalThis.String(object.tx) : "",
      maxBurnAmount: isSet(object.maxBurnAmount) ? globalThis.Number(object.maxBurnAmount) : undefined,
    };
  },

  toJSON(message: SendRawTxRequest): unknown {
    const obj: any = {};
    if (message.tx !== "") {
      obj.tx = message.tx;
    }
    if (message.maxBurnAmount !== undefined) {
      obj.maxBurnAmount = Math.round(message.maxBurnAmount);
    }
    return obj;
  },

  create(base?: DeepPartial<SendRawTxRequest>): SendRawTxRequest {
    return SendRawTxRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendRawTxRequest>): SendRawTxRequest {
    const message = createBaseSendRawTxRequest();
    message.tx = object.tx ?? "";
    message.maxBurnAmount = object.maxBurnAmount ?? undefined;
    return message;
  },
};

function createBaseGetTokenPubkeyInfoRequest(): GetTokenPubkeyInfoRequest {
  return { publicKeys: [] };
}

export const GetTokenPubkeyInfoRequest: MessageFns<GetTokenPubkeyInfoRequest> = {
  encode(message: GetTokenPubkeyInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.publicKeys) {
      writer.uint32(10).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTokenPubkeyInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTokenPubkeyInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKeys.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTokenPubkeyInfoRequest {
    return {
      publicKeys: globalThis.Array.isArray(object?.publicKeys)
        ? object.publicKeys.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: GetTokenPubkeyInfoRequest): unknown {
    const obj: any = {};
    if (message.publicKeys?.length) {
      obj.publicKeys = message.publicKeys.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetTokenPubkeyInfoRequest>): GetTokenPubkeyInfoRequest {
    return GetTokenPubkeyInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTokenPubkeyInfoRequest>): GetTokenPubkeyInfoRequest {
    const message = createBaseGetTokenPubkeyInfoRequest();
    message.publicKeys = object.publicKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetTokenPubkeyInfoResponse(): GetTokenPubkeyInfoResponse {
  return { tokenPubkeyInfos: [] };
}

export const GetTokenPubkeyInfoResponse: MessageFns<GetTokenPubkeyInfoResponse> = {
  encode(message: GetTokenPubkeyInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tokenPubkeyInfos) {
      TokenPubkeyInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTokenPubkeyInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTokenPubkeyInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tokenPubkeyInfos.push(TokenPubkeyInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTokenPubkeyInfoResponse {
    return {
      tokenPubkeyInfos: globalThis.Array.isArray(object?.tokenPubkeyInfos)
        ? object.tokenPubkeyInfos.map((e: any) => TokenPubkeyInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetTokenPubkeyInfoResponse): unknown {
    const obj: any = {};
    if (message.tokenPubkeyInfos?.length) {
      obj.tokenPubkeyInfos = message.tokenPubkeyInfos.map((e) => TokenPubkeyInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetTokenPubkeyInfoResponse>): GetTokenPubkeyInfoResponse {
    return GetTokenPubkeyInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTokenPubkeyInfoResponse>): GetTokenPubkeyInfoResponse {
    const message = createBaseGetTokenPubkeyInfoResponse();
    message.tokenPubkeyInfos = object.tokenPubkeyInfos?.map((e) => TokenPubkeyInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTokenPubkeyInfo(): TokenPubkeyInfo {
  return { announcement: undefined, totalSupply: new Uint8Array(0), owner: undefined, logoUrl: undefined };
}

export const TokenPubkeyInfo: MessageFns<TokenPubkeyInfo> = {
  encode(message: TokenPubkeyInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.announcement !== undefined) {
      TokenPubkeyAnnouncement.encode(message.announcement, writer.uint32(10).fork()).join();
    }
    if (message.totalSupply.length !== 0) {
      writer.uint32(18).bytes(message.totalSupply);
    }
    if (message.owner !== undefined) {
      writer.uint32(26).bytes(message.owner);
    }
    if (message.logoUrl !== undefined) {
      writer.uint32(34).string(message.logoUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenPubkeyInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenPubkeyInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.announcement = TokenPubkeyAnnouncement.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.totalSupply = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.logoUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenPubkeyInfo {
    return {
      announcement: isSet(object.announcement) ? TokenPubkeyAnnouncement.fromJSON(object.announcement) : undefined,
      totalSupply: isSet(object.totalSupply) ? bytesFromBase64(object.totalSupply) : new Uint8Array(0),
      owner: isSet(object.owner) ? bytesFromBase64(object.owner) : undefined,
      logoUrl: isSet(object.logoUrl) ? globalThis.String(object.logoUrl) : undefined,
    };
  },

  toJSON(message: TokenPubkeyInfo): unknown {
    const obj: any = {};
    if (message.announcement !== undefined) {
      obj.announcement = TokenPubkeyAnnouncement.toJSON(message.announcement);
    }
    if (message.totalSupply.length !== 0) {
      obj.totalSupply = base64FromBytes(message.totalSupply);
    }
    if (message.owner !== undefined) {
      obj.owner = base64FromBytes(message.owner);
    }
    if (message.logoUrl !== undefined) {
      obj.logoUrl = message.logoUrl;
    }
    return obj;
  },

  create(base?: DeepPartial<TokenPubkeyInfo>): TokenPubkeyInfo {
    return TokenPubkeyInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenPubkeyInfo>): TokenPubkeyInfo {
    const message = createBaseTokenPubkeyInfo();
    message.announcement = (object.announcement !== undefined && object.announcement !== null)
      ? TokenPubkeyAnnouncement.fromPartial(object.announcement)
      : undefined;
    message.totalSupply = object.totalSupply ?? new Uint8Array(0);
    message.owner = object.owner ?? undefined;
    message.logoUrl = object.logoUrl ?? undefined;
    return message;
  },
};

function createBaseTokenOutput(): TokenOutput {
  return {
    id: "",
    ownerPublicKey: new Uint8Array(0),
    revocationCommitment: new Uint8Array(0),
    withdrawalBondSats: 0,
    withdrawalLocktime: 0,
    tokenPublicKey: new Uint8Array(0),
    tokenAmount: new Uint8Array(0),
    isFrozen: undefined,
  };
}

export const TokenOutput: MessageFns<TokenOutput> = {
  encode(message: TokenOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.ownerPublicKey.length !== 0) {
      writer.uint32(18).bytes(message.ownerPublicKey);
    }
    if (message.revocationCommitment.length !== 0) {
      writer.uint32(26).bytes(message.revocationCommitment);
    }
    if (message.withdrawalBondSats !== 0) {
      writer.uint32(32).uint64(message.withdrawalBondSats);
    }
    if (message.withdrawalLocktime !== 0) {
      writer.uint32(40).uint64(message.withdrawalLocktime);
    }
    if (message.tokenPublicKey.length !== 0) {
      writer.uint32(50).bytes(message.tokenPublicKey);
    }
    if (message.tokenAmount.length !== 0) {
      writer.uint32(58).bytes(message.tokenAmount);
    }
    if (message.isFrozen !== undefined) {
      writer.uint32(64).bool(message.isFrozen);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ownerPublicKey = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.revocationCommitment = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.withdrawalBondSats = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.withdrawalLocktime = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tokenPublicKey = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tokenAmount = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isFrozen = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenOutput {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      ownerPublicKey: isSet(object.ownerPublicKey) ? bytesFromBase64(object.ownerPublicKey) : new Uint8Array(0),
      revocationCommitment: isSet(object.revocationCommitment)
        ? bytesFromBase64(object.revocationCommitment)
        : new Uint8Array(0),
      withdrawalBondSats: isSet(object.withdrawalBondSats) ? globalThis.Number(object.withdrawalBondSats) : 0,
      withdrawalLocktime: isSet(object.withdrawalLocktime) ? globalThis.Number(object.withdrawalLocktime) : 0,
      tokenPublicKey: isSet(object.tokenPublicKey) ? bytesFromBase64(object.tokenPublicKey) : new Uint8Array(0),
      tokenAmount: isSet(object.tokenAmount) ? bytesFromBase64(object.tokenAmount) : new Uint8Array(0),
      isFrozen: isSet(object.isFrozen) ? globalThis.Boolean(object.isFrozen) : undefined,
    };
  },

  toJSON(message: TokenOutput): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.ownerPublicKey.length !== 0) {
      obj.ownerPublicKey = base64FromBytes(message.ownerPublicKey);
    }
    if (message.revocationCommitment.length !== 0) {
      obj.revocationCommitment = base64FromBytes(message.revocationCommitment);
    }
    if (message.withdrawalBondSats !== 0) {
      obj.withdrawalBondSats = Math.round(message.withdrawalBondSats);
    }
    if (message.withdrawalLocktime !== 0) {
      obj.withdrawalLocktime = Math.round(message.withdrawalLocktime);
    }
    if (message.tokenPublicKey.length !== 0) {
      obj.tokenPublicKey = base64FromBytes(message.tokenPublicKey);
    }
    if (message.tokenAmount.length !== 0) {
      obj.tokenAmount = base64FromBytes(message.tokenAmount);
    }
    if (message.isFrozen !== undefined) {
      obj.isFrozen = message.isFrozen;
    }
    return obj;
  },

  create(base?: DeepPartial<TokenOutput>): TokenOutput {
    return TokenOutput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenOutput>): TokenOutput {
    const message = createBaseTokenOutput();
    message.id = object.id ?? "";
    message.ownerPublicKey = object.ownerPublicKey ?? new Uint8Array(0);
    message.revocationCommitment = object.revocationCommitment ?? new Uint8Array(0);
    message.withdrawalBondSats = object.withdrawalBondSats ?? 0;
    message.withdrawalLocktime = object.withdrawalLocktime ?? 0;
    message.tokenPublicKey = object.tokenPublicKey ?? new Uint8Array(0);
    message.tokenAmount = object.tokenAmount ?? new Uint8Array(0);
    message.isFrozen = object.isFrozen ?? undefined;
    return message;
  },
};

function createBaseFreezeTokensPayload(): FreezeTokensPayload {
  return {
    ownerPublicKey: new Uint8Array(0),
    tokenPublicKey: new Uint8Array(0),
    timestamp: 0,
    operatorIdentityPublicKey: new Uint8Array(0),
    shouldUnfreeze: false,
  };
}

export const FreezeTokensPayload: MessageFns<FreezeTokensPayload> = {
  encode(message: FreezeTokensPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ownerPublicKey.length !== 0) {
      writer.uint32(10).bytes(message.ownerPublicKey);
    }
    if (message.tokenPublicKey.length !== 0) {
      writer.uint32(18).bytes(message.tokenPublicKey);
    }
    if (message.timestamp !== 0) {
      writer.uint32(24).uint64(message.timestamp);
    }
    if (message.operatorIdentityPublicKey.length !== 0) {
      writer.uint32(34).bytes(message.operatorIdentityPublicKey);
    }
    if (message.shouldUnfreeze !== false) {
      writer.uint32(40).bool(message.shouldUnfreeze);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FreezeTokensPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFreezeTokensPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ownerPublicKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tokenPublicKey = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.operatorIdentityPublicKey = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.shouldUnfreeze = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FreezeTokensPayload {
    return {
      ownerPublicKey: isSet(object.ownerPublicKey) ? bytesFromBase64(object.ownerPublicKey) : new Uint8Array(0),
      tokenPublicKey: isSet(object.tokenPublicKey) ? bytesFromBase64(object.tokenPublicKey) : new Uint8Array(0),
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      operatorIdentityPublicKey: isSet(object.operatorIdentityPublicKey)
        ? bytesFromBase64(object.operatorIdentityPublicKey)
        : new Uint8Array(0),
      shouldUnfreeze: isSet(object.shouldUnfreeze) ? globalThis.Boolean(object.shouldUnfreeze) : false,
    };
  },

  toJSON(message: FreezeTokensPayload): unknown {
    const obj: any = {};
    if (message.ownerPublicKey.length !== 0) {
      obj.ownerPublicKey = base64FromBytes(message.ownerPublicKey);
    }
    if (message.tokenPublicKey.length !== 0) {
      obj.tokenPublicKey = base64FromBytes(message.tokenPublicKey);
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.operatorIdentityPublicKey.length !== 0) {
      obj.operatorIdentityPublicKey = base64FromBytes(message.operatorIdentityPublicKey);
    }
    if (message.shouldUnfreeze !== false) {
      obj.shouldUnfreeze = message.shouldUnfreeze;
    }
    return obj;
  },

  create(base?: DeepPartial<FreezeTokensPayload>): FreezeTokensPayload {
    return FreezeTokensPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FreezeTokensPayload>): FreezeTokensPayload {
    const message = createBaseFreezeTokensPayload();
    message.ownerPublicKey = object.ownerPublicKey ?? new Uint8Array(0);
    message.tokenPublicKey = object.tokenPublicKey ?? new Uint8Array(0);
    message.timestamp = object.timestamp ?? 0;
    message.operatorIdentityPublicKey = object.operatorIdentityPublicKey ?? new Uint8Array(0);
    message.shouldUnfreeze = object.shouldUnfreeze ?? false;
    return message;
  },
};

function createBaseTokenTransactionResponse(): TokenTransactionResponse {
  return { finalized: false, finalTokenTransaction: undefined, finalTokenTransactionHash: new Uint8Array(0) };
}

export const TokenTransactionResponse: MessageFns<TokenTransactionResponse> = {
  encode(message: TokenTransactionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.finalized !== false) {
      writer.uint32(8).bool(message.finalized);
    }
    if (message.finalTokenTransaction !== undefined) {
      TokenTransaction.encode(message.finalTokenTransaction, writer.uint32(18).fork()).join();
    }
    if (message.finalTokenTransactionHash.length !== 0) {
      writer.uint32(26).bytes(message.finalTokenTransactionHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenTransactionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenTransactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.finalized = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.finalTokenTransaction = TokenTransaction.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.finalTokenTransactionHash = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenTransactionResponse {
    return {
      finalized: isSet(object.finalized) ? globalThis.Boolean(object.finalized) : false,
      finalTokenTransaction: isSet(object.finalTokenTransaction)
        ? TokenTransaction.fromJSON(object.finalTokenTransaction)
        : undefined,
      finalTokenTransactionHash: isSet(object.finalTokenTransactionHash)
        ? bytesFromBase64(object.finalTokenTransactionHash)
        : new Uint8Array(0),
    };
  },

  toJSON(message: TokenTransactionResponse): unknown {
    const obj: any = {};
    if (message.finalized !== false) {
      obj.finalized = message.finalized;
    }
    if (message.finalTokenTransaction !== undefined) {
      obj.finalTokenTransaction = TokenTransaction.toJSON(message.finalTokenTransaction);
    }
    if (message.finalTokenTransactionHash.length !== 0) {
      obj.finalTokenTransactionHash = base64FromBytes(message.finalTokenTransactionHash);
    }
    return obj;
  },

  create(base?: DeepPartial<TokenTransactionResponse>): TokenTransactionResponse {
    return TokenTransactionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenTransactionResponse>): TokenTransactionResponse {
    const message = createBaseTokenTransactionResponse();
    message.finalized = object.finalized ?? false;
    message.finalTokenTransaction =
      (object.finalTokenTransaction !== undefined && object.finalTokenTransaction !== null)
        ? TokenTransaction.fromPartial(object.finalTokenTransaction)
        : undefined;
    message.finalTokenTransactionHash = object.finalTokenTransactionHash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseTransaction(): Transaction {
  return { transaction: undefined };
}

export const Transaction: MessageFns<Transaction> = {
  encode(message: Transaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.transaction?.$case) {
      case "onChain":
        OnChainTransaction.encode(message.transaction.onChain, writer.uint32(10).fork()).join();
        break;
      case "spark":
        SparkTransaction.encode(message.transaction.spark, writer.uint32(18).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Transaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transaction = { $case: "onChain", onChain: OnChainTransaction.decode(reader, reader.uint32()) };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.transaction = { $case: "spark", spark: SparkTransaction.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Transaction {
    return {
      transaction: isSet(object.onChain)
        ? { $case: "onChain", onChain: OnChainTransaction.fromJSON(object.onChain) }
        : isSet(object.spark)
        ? { $case: "spark", spark: SparkTransaction.fromJSON(object.spark) }
        : undefined,
    };
  },

  toJSON(message: Transaction): unknown {
    const obj: any = {};
    if (message.transaction?.$case === "onChain") {
      obj.onChain = OnChainTransaction.toJSON(message.transaction.onChain);
    } else if (message.transaction?.$case === "spark") {
      obj.spark = SparkTransaction.toJSON(message.transaction.spark);
    }
    return obj;
  },

  create(base?: DeepPartial<Transaction>): Transaction {
    return Transaction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Transaction>): Transaction {
    const message = createBaseTransaction();
    switch (object.transaction?.$case) {
      case "onChain": {
        if (object.transaction?.onChain !== undefined && object.transaction?.onChain !== null) {
          message.transaction = {
            $case: "onChain",
            onChain: OnChainTransaction.fromPartial(object.transaction.onChain),
          };
        }
        break;
      }
      case "spark": {
        if (object.transaction?.spark !== undefined && object.transaction?.spark !== null) {
          message.transaction = { $case: "spark", spark: SparkTransaction.fromPartial(object.transaction.spark) };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseListAllTokenTransactionsCursor(): ListAllTokenTransactionsCursor {
  return { lastTransactionHash: new Uint8Array(0), layer: 0 };
}

export const ListAllTokenTransactionsCursor: MessageFns<ListAllTokenTransactionsCursor> = {
  encode(message: ListAllTokenTransactionsCursor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastTransactionHash.length !== 0) {
      writer.uint32(10).bytes(message.lastTransactionHash);
    }
    if (message.layer !== 0) {
      writer.uint32(16).int32(message.layer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAllTokenTransactionsCursor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAllTokenTransactionsCursor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lastTransactionHash = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.layer = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAllTokenTransactionsCursor {
    return {
      lastTransactionHash: isSet(object.lastTransactionHash)
        ? bytesFromBase64(object.lastTransactionHash)
        : new Uint8Array(0),
      layer: isSet(object.layer) ? layerFromJSON(object.layer) : 0,
    };
  },

  toJSON(message: ListAllTokenTransactionsCursor): unknown {
    const obj: any = {};
    if (message.lastTransactionHash.length !== 0) {
      obj.lastTransactionHash = base64FromBytes(message.lastTransactionHash);
    }
    if (message.layer !== 0) {
      obj.layer = layerToJSON(message.layer);
    }
    return obj;
  },

  create(base?: DeepPartial<ListAllTokenTransactionsCursor>): ListAllTokenTransactionsCursor {
    return ListAllTokenTransactionsCursor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAllTokenTransactionsCursor>): ListAllTokenTransactionsCursor {
    const message = createBaseListAllTokenTransactionsCursor();
    message.lastTransactionHash = object.lastTransactionHash ?? new Uint8Array(0);
    message.layer = object.layer ?? 0;
    return message;
  },
};

function createBaseOnChainTokenOutput(): OnChainTokenOutput {
  return { rawTx: new Uint8Array(0), vout: 0, amountSats: 0, tokenPublicKey: undefined, tokenAmount: undefined };
}

export const OnChainTokenOutput: MessageFns<OnChainTokenOutput> = {
  encode(message: OnChainTokenOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rawTx.length !== 0) {
      writer.uint32(10).bytes(message.rawTx);
    }
    if (message.vout !== 0) {
      writer.uint32(16).uint32(message.vout);
    }
    if (message.amountSats !== 0) {
      writer.uint32(24).uint64(message.amountSats);
    }
    if (message.tokenPublicKey !== undefined) {
      writer.uint32(34).string(message.tokenPublicKey);
    }
    if (message.tokenAmount !== undefined) {
      writer.uint32(42).bytes(message.tokenAmount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnChainTokenOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnChainTokenOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rawTx = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.vout = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amountSats = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tokenPublicKey = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tokenAmount = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnChainTokenOutput {
    return {
      rawTx: isSet(object.rawTx) ? bytesFromBase64(object.rawTx) : new Uint8Array(0),
      vout: isSet(object.vout) ? globalThis.Number(object.vout) : 0,
      amountSats: isSet(object.amountSats) ? globalThis.Number(object.amountSats) : 0,
      tokenPublicKey: isSet(object.tokenPublicKey) ? globalThis.String(object.tokenPublicKey) : undefined,
      tokenAmount: isSet(object.tokenAmount) ? bytesFromBase64(object.tokenAmount) : undefined,
    };
  },

  toJSON(message: OnChainTokenOutput): unknown {
    const obj: any = {};
    if (message.rawTx.length !== 0) {
      obj.rawTx = base64FromBytes(message.rawTx);
    }
    if (message.vout !== 0) {
      obj.vout = Math.round(message.vout);
    }
    if (message.amountSats !== 0) {
      obj.amountSats = Math.round(message.amountSats);
    }
    if (message.tokenPublicKey !== undefined) {
      obj.tokenPublicKey = message.tokenPublicKey;
    }
    if (message.tokenAmount !== undefined) {
      obj.tokenAmount = base64FromBytes(message.tokenAmount);
    }
    return obj;
  },

  create(base?: DeepPartial<OnChainTokenOutput>): OnChainTokenOutput {
    return OnChainTokenOutput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OnChainTokenOutput>): OnChainTokenOutput {
    const message = createBaseOnChainTokenOutput();
    message.rawTx = object.rawTx ?? new Uint8Array(0);
    message.vout = object.vout ?? 0;
    message.amountSats = object.amountSats ?? 0;
    message.tokenPublicKey = object.tokenPublicKey ?? undefined;
    message.tokenAmount = object.tokenAmount ?? undefined;
    return message;
  },
};

function createBaseOnChainTransaction(): OnChainTransaction {
  return {
    operationType: 0,
    transactionHash: new Uint8Array(0),
    rawtx: new Uint8Array(0),
    status: 0,
    inputs: [],
    outputs: [],
    broadcastedAt: undefined,
    confirmedAt: undefined,
  };
}

export const OnChainTransaction: MessageFns<OnChainTransaction> = {
  encode(message: OnChainTransaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationType !== 0) {
      writer.uint32(8).int32(message.operationType);
    }
    if (message.transactionHash.length !== 0) {
      writer.uint32(18).bytes(message.transactionHash);
    }
    if (message.rawtx.length !== 0) {
      writer.uint32(26).bytes(message.rawtx);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    for (const v of message.inputs) {
      OnChainTokenOutput.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.outputs) {
      OnChainTokenOutput.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.broadcastedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.broadcastedAt), writer.uint32(58).fork()).join();
    }
    if (message.confirmedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.confirmedAt), writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnChainTransaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnChainTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operationType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.transactionHash = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rawtx = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.inputs.push(OnChainTokenOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.outputs.push(OnChainTokenOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.broadcastedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.confirmedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnChainTransaction {
    return {
      operationType: isSet(object.operationType) ? operationTypeFromJSON(object.operationType) : 0,
      transactionHash: isSet(object.transactionHash) ? bytesFromBase64(object.transactionHash) : new Uint8Array(0),
      rawtx: isSet(object.rawtx) ? bytesFromBase64(object.rawtx) : new Uint8Array(0),
      status: isSet(object.status) ? onChainTransactionStatusFromJSON(object.status) : 0,
      inputs: globalThis.Array.isArray(object?.inputs)
        ? object.inputs.map((e: any) => OnChainTokenOutput.fromJSON(e))
        : [],
      outputs: globalThis.Array.isArray(object?.outputs)
        ? object.outputs.map((e: any) => OnChainTokenOutput.fromJSON(e))
        : [],
      broadcastedAt: isSet(object.broadcastedAt) ? fromJsonTimestamp(object.broadcastedAt) : undefined,
      confirmedAt: isSet(object.confirmedAt) ? fromJsonTimestamp(object.confirmedAt) : undefined,
    };
  },

  toJSON(message: OnChainTransaction): unknown {
    const obj: any = {};
    if (message.operationType !== 0) {
      obj.operationType = operationTypeToJSON(message.operationType);
    }
    if (message.transactionHash.length !== 0) {
      obj.transactionHash = base64FromBytes(message.transactionHash);
    }
    if (message.rawtx.length !== 0) {
      obj.rawtx = base64FromBytes(message.rawtx);
    }
    if (message.status !== 0) {
      obj.status = onChainTransactionStatusToJSON(message.status);
    }
    if (message.inputs?.length) {
      obj.inputs = message.inputs.map((e) => OnChainTokenOutput.toJSON(e));
    }
    if (message.outputs?.length) {
      obj.outputs = message.outputs.map((e) => OnChainTokenOutput.toJSON(e));
    }
    if (message.broadcastedAt !== undefined) {
      obj.broadcastedAt = message.broadcastedAt.toISOString();
    }
    if (message.confirmedAt !== undefined) {
      obj.confirmedAt = message.confirmedAt.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<OnChainTransaction>): OnChainTransaction {
    return OnChainTransaction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OnChainTransaction>): OnChainTransaction {
    const message = createBaseOnChainTransaction();
    message.operationType = object.operationType ?? 0;
    message.transactionHash = object.transactionHash ?? new Uint8Array(0);
    message.rawtx = object.rawtx ?? new Uint8Array(0);
    message.status = object.status ?? 0;
    message.inputs = object.inputs?.map((e) => OnChainTokenOutput.fromPartial(e)) || [];
    message.outputs = object.outputs?.map((e) => OnChainTokenOutput.fromPartial(e)) || [];
    message.broadcastedAt = object.broadcastedAt ?? undefined;
    message.confirmedAt = object.confirmedAt ?? undefined;
    return message;
  },
};

function createBaseSparkTransaction(): SparkTransaction {
  return {
    operationType: 0,
    transactionHash: new Uint8Array(0),
    status: 0,
    confirmedAt: undefined,
    leavesToCreate: [],
    leavesToSpend: [],
    sparkOperatorIdentityPublicKeys: [],
  };
}

export const SparkTransaction: MessageFns<SparkTransaction> = {
  encode(message: SparkTransaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationType !== 0) {
      writer.uint32(8).int32(message.operationType);
    }
    if (message.transactionHash.length !== 0) {
      writer.uint32(18).bytes(message.transactionHash);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.confirmedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.confirmedAt), writer.uint32(34).fork()).join();
    }
    for (const v of message.leavesToCreate) {
      SparkLeaf.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.leavesToSpend) {
      SparkLeaf.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.sparkOperatorIdentityPublicKeys) {
      writer.uint32(58).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SparkTransaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSparkTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operationType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.transactionHash = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.confirmedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.leavesToCreate.push(SparkLeaf.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.leavesToSpend.push(SparkLeaf.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.sparkOperatorIdentityPublicKeys.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SparkTransaction {
    return {
      operationType: isSet(object.operationType) ? operationTypeFromJSON(object.operationType) : 0,
      transactionHash: isSet(object.transactionHash) ? bytesFromBase64(object.transactionHash) : new Uint8Array(0),
      status: isSet(object.status) ? sparkTransactionStatusFromJSON(object.status) : 0,
      confirmedAt: isSet(object.confirmedAt) ? fromJsonTimestamp(object.confirmedAt) : undefined,
      leavesToCreate: globalThis.Array.isArray(object?.leavesToCreate)
        ? object.leavesToCreate.map((e: any) => SparkLeaf.fromJSON(e))
        : [],
      leavesToSpend: globalThis.Array.isArray(object?.leavesToSpend)
        ? object.leavesToSpend.map((e: any) => SparkLeaf.fromJSON(e))
        : [],
      sparkOperatorIdentityPublicKeys: globalThis.Array.isArray(object?.sparkOperatorIdentityPublicKeys)
        ? object.sparkOperatorIdentityPublicKeys.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: SparkTransaction): unknown {
    const obj: any = {};
    if (message.operationType !== 0) {
      obj.operationType = operationTypeToJSON(message.operationType);
    }
    if (message.transactionHash.length !== 0) {
      obj.transactionHash = base64FromBytes(message.transactionHash);
    }
    if (message.status !== 0) {
      obj.status = sparkTransactionStatusToJSON(message.status);
    }
    if (message.confirmedAt !== undefined) {
      obj.confirmedAt = message.confirmedAt.toISOString();
    }
    if (message.leavesToCreate?.length) {
      obj.leavesToCreate = message.leavesToCreate.map((e) => SparkLeaf.toJSON(e));
    }
    if (message.leavesToSpend?.length) {
      obj.leavesToSpend = message.leavesToSpend.map((e) => SparkLeaf.toJSON(e));
    }
    if (message.sparkOperatorIdentityPublicKeys?.length) {
      obj.sparkOperatorIdentityPublicKeys = message.sparkOperatorIdentityPublicKeys.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SparkTransaction>): SparkTransaction {
    return SparkTransaction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SparkTransaction>): SparkTransaction {
    const message = createBaseSparkTransaction();
    message.operationType = object.operationType ?? 0;
    message.transactionHash = object.transactionHash ?? new Uint8Array(0);
    message.status = object.status ?? 0;
    message.confirmedAt = object.confirmedAt ?? undefined;
    message.leavesToCreate = object.leavesToCreate?.map((e) => SparkLeaf.fromPartial(e)) || [];
    message.leavesToSpend = object.leavesToSpend?.map((e) => SparkLeaf.fromPartial(e)) || [];
    message.sparkOperatorIdentityPublicKeys = object.sparkOperatorIdentityPublicKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseSparkLeaf(): SparkLeaf {
  return {
    tokenPublicKey: new Uint8Array(0),
    id: "",
    ownerPublicKey: new Uint8Array(0),
    revocationPublicKey: new Uint8Array(0),
    withdrawalBondSats: 0,
    withdrawalLocktime: 0,
    tokenAmount: new Uint8Array(0),
    createTxHash: new Uint8Array(0),
    createTxVoutIndex: 0,
    spendTxHash: undefined,
    spendTxVoutIndex: undefined,
    isFrozen: undefined,
  };
}

export const SparkLeaf: MessageFns<SparkLeaf> = {
  encode(message: SparkLeaf, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tokenPublicKey.length !== 0) {
      writer.uint32(10).bytes(message.tokenPublicKey);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.ownerPublicKey.length !== 0) {
      writer.uint32(26).bytes(message.ownerPublicKey);
    }
    if (message.revocationPublicKey.length !== 0) {
      writer.uint32(34).bytes(message.revocationPublicKey);
    }
    if (message.withdrawalBondSats !== 0) {
      writer.uint32(40).uint64(message.withdrawalBondSats);
    }
    if (message.withdrawalLocktime !== 0) {
      writer.uint32(48).uint64(message.withdrawalLocktime);
    }
    if (message.tokenAmount.length !== 0) {
      writer.uint32(58).bytes(message.tokenAmount);
    }
    if (message.createTxHash.length !== 0) {
      writer.uint32(66).bytes(message.createTxHash);
    }
    if (message.createTxVoutIndex !== 0) {
      writer.uint32(72).uint32(message.createTxVoutIndex);
    }
    if (message.spendTxHash !== undefined) {
      writer.uint32(82).bytes(message.spendTxHash);
    }
    if (message.spendTxVoutIndex !== undefined) {
      writer.uint32(88).uint32(message.spendTxVoutIndex);
    }
    if (message.isFrozen !== undefined) {
      writer.uint32(96).bool(message.isFrozen);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SparkLeaf {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSparkLeaf();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tokenPublicKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ownerPublicKey = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.revocationPublicKey = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.withdrawalBondSats = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.withdrawalLocktime = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tokenAmount = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createTxHash = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.createTxVoutIndex = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.spendTxHash = reader.bytes();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.spendTxVoutIndex = reader.uint32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isFrozen = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SparkLeaf {
    return {
      tokenPublicKey: isSet(object.tokenPublicKey) ? bytesFromBase64(object.tokenPublicKey) : new Uint8Array(0),
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      ownerPublicKey: isSet(object.ownerPublicKey) ? bytesFromBase64(object.ownerPublicKey) : new Uint8Array(0),
      revocationPublicKey: isSet(object.revocationPublicKey)
        ? bytesFromBase64(object.revocationPublicKey)
        : new Uint8Array(0),
      withdrawalBondSats: isSet(object.withdrawalBondSats) ? globalThis.Number(object.withdrawalBondSats) : 0,
      withdrawalLocktime: isSet(object.withdrawalLocktime) ? globalThis.Number(object.withdrawalLocktime) : 0,
      tokenAmount: isSet(object.tokenAmount) ? bytesFromBase64(object.tokenAmount) : new Uint8Array(0),
      createTxHash: isSet(object.createTxHash) ? bytesFromBase64(object.createTxHash) : new Uint8Array(0),
      createTxVoutIndex: isSet(object.createTxVoutIndex) ? globalThis.Number(object.createTxVoutIndex) : 0,
      spendTxHash: isSet(object.spendTxHash) ? bytesFromBase64(object.spendTxHash) : undefined,
      spendTxVoutIndex: isSet(object.spendTxVoutIndex) ? globalThis.Number(object.spendTxVoutIndex) : undefined,
      isFrozen: isSet(object.isFrozen) ? globalThis.Boolean(object.isFrozen) : undefined,
    };
  },

  toJSON(message: SparkLeaf): unknown {
    const obj: any = {};
    if (message.tokenPublicKey.length !== 0) {
      obj.tokenPublicKey = base64FromBytes(message.tokenPublicKey);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.ownerPublicKey.length !== 0) {
      obj.ownerPublicKey = base64FromBytes(message.ownerPublicKey);
    }
    if (message.revocationPublicKey.length !== 0) {
      obj.revocationPublicKey = base64FromBytes(message.revocationPublicKey);
    }
    if (message.withdrawalBondSats !== 0) {
      obj.withdrawalBondSats = Math.round(message.withdrawalBondSats);
    }
    if (message.withdrawalLocktime !== 0) {
      obj.withdrawalLocktime = Math.round(message.withdrawalLocktime);
    }
    if (message.tokenAmount.length !== 0) {
      obj.tokenAmount = base64FromBytes(message.tokenAmount);
    }
    if (message.createTxHash.length !== 0) {
      obj.createTxHash = base64FromBytes(message.createTxHash);
    }
    if (message.createTxVoutIndex !== 0) {
      obj.createTxVoutIndex = Math.round(message.createTxVoutIndex);
    }
    if (message.spendTxHash !== undefined) {
      obj.spendTxHash = base64FromBytes(message.spendTxHash);
    }
    if (message.spendTxVoutIndex !== undefined) {
      obj.spendTxVoutIndex = Math.round(message.spendTxVoutIndex);
    }
    if (message.isFrozen !== undefined) {
      obj.isFrozen = message.isFrozen;
    }
    return obj;
  },

  create(base?: DeepPartial<SparkLeaf>): SparkLeaf {
    return SparkLeaf.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SparkLeaf>): SparkLeaf {
    const message = createBaseSparkLeaf();
    message.tokenPublicKey = object.tokenPublicKey ?? new Uint8Array(0);
    message.id = object.id ?? "";
    message.ownerPublicKey = object.ownerPublicKey ?? new Uint8Array(0);
    message.revocationPublicKey = object.revocationPublicKey ?? new Uint8Array(0);
    message.withdrawalBondSats = object.withdrawalBondSats ?? 0;
    message.withdrawalLocktime = object.withdrawalLocktime ?? 0;
    message.tokenAmount = object.tokenAmount ?? new Uint8Array(0);
    message.createTxHash = object.createTxHash ?? new Uint8Array(0);
    message.createTxVoutIndex = object.createTxVoutIndex ?? 0;
    message.spendTxHash = object.spendTxHash ?? undefined;
    message.spendTxVoutIndex = object.spendTxVoutIndex ?? undefined;
    message.isFrozen = object.isFrozen ?? undefined;
    return message;
  },
};

function createBaseBlockInfo(): BlockInfo {
  return { blockHash: new Uint8Array(0), blockHeight: 0, minedAt: undefined };
}

export const BlockInfo: MessageFns<BlockInfo> = {
  encode(message: BlockInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blockHash.length !== 0) {
      writer.uint32(10).bytes(message.blockHash);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(16).uint32(message.blockHeight);
    }
    if (message.minedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.minedAt), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blockHash = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.blockHeight = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.minedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockInfo {
    return {
      blockHash: isSet(object.blockHash) ? bytesFromBase64(object.blockHash) : new Uint8Array(0),
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      minedAt: isSet(object.minedAt) ? fromJsonTimestamp(object.minedAt) : undefined,
    };
  },

  toJSON(message: BlockInfo): unknown {
    const obj: any = {};
    if (message.blockHash.length !== 0) {
      obj.blockHash = base64FromBytes(message.blockHash);
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.minedAt !== undefined) {
      obj.minedAt = message.minedAt.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<BlockInfo>): BlockInfo {
    return BlockInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BlockInfo>): BlockInfo {
    const message = createBaseBlockInfo();
    message.blockHash = object.blockHash ?? new Uint8Array(0);
    message.blockHeight = object.blockHeight ?? 0;
    message.minedAt = object.minedAt ?? undefined;
    return message;
  },
};

function createBaseTokenPubkey(): TokenPubkey {
  return { publicKey: new Uint8Array(0) };
}

export const TokenPubkey: MessageFns<TokenPubkey> = {
  encode(message: TokenPubkey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKey.length !== 0) {
      writer.uint32(10).bytes(message.publicKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenPubkey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenPubkey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenPubkey {
    return { publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : new Uint8Array(0) };
  },

  toJSON(message: TokenPubkey): unknown {
    const obj: any = {};
    if (message.publicKey.length !== 0) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    return obj;
  },

  create(base?: DeepPartial<TokenPubkey>): TokenPubkey {
    return TokenPubkey.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenPubkey>): TokenPubkey {
    const message = createBaseTokenPubkey();
    message.publicKey = object.publicKey ?? new Uint8Array(0);
    return message;
  },
};

function createBaseTokenPubkeyAnnouncement(): TokenPubkeyAnnouncement {
  return {
    publicKey: undefined,
    name: "",
    symbol: "",
    decimal: new Uint8Array(0),
    maxSupply: new Uint8Array(0),
    isFreezable: false,
  };
}

export const TokenPubkeyAnnouncement: MessageFns<TokenPubkeyAnnouncement> = {
  encode(message: TokenPubkeyAnnouncement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKey !== undefined) {
      TokenPubkey.encode(message.publicKey, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.symbol !== "") {
      writer.uint32(26).string(message.symbol);
    }
    if (message.decimal.length !== 0) {
      writer.uint32(34).bytes(message.decimal);
    }
    if (message.maxSupply.length !== 0) {
      writer.uint32(42).bytes(message.maxSupply);
    }
    if (message.isFreezable !== false) {
      writer.uint32(48).bool(message.isFreezable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenPubkeyAnnouncement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenPubkeyAnnouncement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKey = TokenPubkey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.symbol = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.decimal = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.maxSupply = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isFreezable = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenPubkeyAnnouncement {
    return {
      publicKey: isSet(object.publicKey) ? TokenPubkey.fromJSON(object.publicKey) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
      decimal: isSet(object.decimal) ? bytesFromBase64(object.decimal) : new Uint8Array(0),
      maxSupply: isSet(object.maxSupply) ? bytesFromBase64(object.maxSupply) : new Uint8Array(0),
      isFreezable: isSet(object.isFreezable) ? globalThis.Boolean(object.isFreezable) : false,
    };
  },

  toJSON(message: TokenPubkeyAnnouncement): unknown {
    const obj: any = {};
    if (message.publicKey !== undefined) {
      obj.publicKey = TokenPubkey.toJSON(message.publicKey);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.symbol !== "") {
      obj.symbol = message.symbol;
    }
    if (message.decimal.length !== 0) {
      obj.decimal = base64FromBytes(message.decimal);
    }
    if (message.maxSupply.length !== 0) {
      obj.maxSupply = base64FromBytes(message.maxSupply);
    }
    if (message.isFreezable !== false) {
      obj.isFreezable = message.isFreezable;
    }
    return obj;
  },

  create(base?: DeepPartial<TokenPubkeyAnnouncement>): TokenPubkeyAnnouncement {
    return TokenPubkeyAnnouncement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenPubkeyAnnouncement>): TokenPubkeyAnnouncement {
    const message = createBaseTokenPubkeyAnnouncement();
    message.publicKey = (object.publicKey !== undefined && object.publicKey !== null)
      ? TokenPubkey.fromPartial(object.publicKey)
      : undefined;
    message.name = object.name ?? "";
    message.symbol = object.symbol ?? "";
    message.decimal = object.decimal ?? new Uint8Array(0);
    message.maxSupply = object.maxSupply ?? new Uint8Array(0);
    message.isFreezable = object.isFreezable ?? false;
    return message;
  },
};

export type SparkServiceDefinition = typeof SparkServiceDefinition;
export const SparkServiceDefinition = {
  name: "SparkService",
  fullName: "rpc.v1.SparkService",
  methods: {
    sendSparkSignature: {
      name: "SendSparkSignature",
      requestType: SendSparkSignatureRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    listSparkTxs: {
      name: "ListSparkTxs",
      requestType: ListSparkTxsRequest,
      requestStream: false,
      responseType: ListSparkTxsResponse,
      responseStream: false,
      options: {},
    },
    listTransactions: {
      name: "ListTransactions",
      requestType: ListAllTokenTransactionsRequest,
      requestStream: false,
      responseType: ListAllTokenTransactionsResponse,
      responseStream: false,
      options: {},
    },
    listWithdrawnOutputs: {
      name: "ListWithdrawnOutputs",
      requestType: ListWithdrawnOutputsRequest,
      requestStream: false,
      responseType: ListWithdrawnOutputsResponse,
      responseStream: false,
      options: {},
    },
    getSparkTx: {
      name: "GetSparkTx",
      requestType: GetSparkTxRequest,
      requestStream: false,
      responseType: GetSparkTxResponse,
      responseStream: false,
      options: {},
    },
    verifySparkTx: {
      name: "VerifySparkTx",
      requestType: VerifySparkTxRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    freezeTokens: {
      name: "FreezeTokens",
      requestType: FreezeTokensRequest,
      requestStream: false,
      responseType: FreezeTokensResponse,
      responseStream: false,
      options: {},
    },
    getLastIndexedBlockInfo: {
      name: "GetLastIndexedBlockInfo",
      requestType: Empty,
      requestStream: false,
      responseType: BlockInfoResponse,
      responseStream: false,
      options: {},
    },
    sendRawLrcTransaction: {
      name: "SendRawLrcTransaction",
      requestType: SendRawTxRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    getTokenPubkeyInfo: {
      name: "GetTokenPubkeyInfo",
      requestType: GetTokenPubkeyInfoRequest,
      requestStream: false,
      responseType: GetTokenPubkeyInfoResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface SparkServiceImplementation<CallContextExt = {}> {
  sendSparkSignature(
    request: SendSparkSignatureRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
  listSparkTxs(
    request: ListSparkTxsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListSparkTxsResponse>>;
  listTransactions(
    request: ListAllTokenTransactionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAllTokenTransactionsResponse>>;
  listWithdrawnOutputs(
    request: ListWithdrawnOutputsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListWithdrawnOutputsResponse>>;
  getSparkTx(
    request: GetSparkTxRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetSparkTxResponse>>;
  verifySparkTx(request: VerifySparkTxRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  freezeTokens(
    request: FreezeTokensRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<FreezeTokensResponse>>;
  getLastIndexedBlockInfo(
    request: Empty,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BlockInfoResponse>>;
  sendRawLrcTransaction(request: SendRawTxRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  getTokenPubkeyInfo(
    request: GetTokenPubkeyInfoRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetTokenPubkeyInfoResponse>>;
}

export interface SparkServiceClient<CallOptionsExt = {}> {
  sendSparkSignature(
    request: DeepPartial<SendSparkSignatureRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
  listSparkTxs(
    request: DeepPartial<ListSparkTxsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListSparkTxsResponse>;
  listTransactions(
    request: DeepPartial<ListAllTokenTransactionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAllTokenTransactionsResponse>;
  listWithdrawnOutputs(
    request: DeepPartial<ListWithdrawnOutputsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListWithdrawnOutputsResponse>;
  getSparkTx(
    request: DeepPartial<GetSparkTxRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetSparkTxResponse>;
  verifySparkTx(request: DeepPartial<VerifySparkTxRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  freezeTokens(
    request: DeepPartial<FreezeTokensRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<FreezeTokensResponse>;
  getLastIndexedBlockInfo(
    request: DeepPartial<Empty>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BlockInfoResponse>;
  sendRawLrcTransaction(request: DeepPartial<SendRawTxRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  getTokenPubkeyInfo(
    request: DeepPartial<GetTokenPubkeyInfoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetTokenPubkeyInfoResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
